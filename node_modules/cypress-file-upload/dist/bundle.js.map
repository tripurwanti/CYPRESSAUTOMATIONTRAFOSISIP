{"version":3,"file":"bundle.js","sources":["../src/constants.js","../lib/browser/isManualEventHandling.js","../src/error.js","../lib/file/constants.js","../src/validators/validateFixture.js","../lib/file/getFileBlobAsync.js","../lib/file/getFileEncoding.js","../src/index.js","../src/attachFile.js","../lib/object/merge.js","../src/validators/validateOptions.js","../src/helpers/getFixtureInfo.js","../lib/file/getFileMimeType.js","../src/helpers/getForceValue.js","../lib/dom/isElementVisible.js","../lib/dom/isShadowElement.js","../lib/file/getFileContent.js","../src/validators/validateFile.js","../src/helpers/attachFileToElement.js"],"sourcesContent":["export const DEFAULT_PROCESSING_OPTIONS = Object.freeze({\n  subjectType: 'input',\n  force: false,\n  allowEmpty: false,\n});\n\nexport const SUBJECT_TYPE = Object.freeze({\n  INPUT: 'input',\n  DRAG_N_DROP: 'drag-n-drop',\n});\n\nexport const EVENTS_BY_SUBJECT_TYPE = {\n  [SUBJECT_TYPE.INPUT]: ['change'],\n  [SUBJECT_TYPE.DRAG_N_DROP]: ['dragstart', 'drag', 'dragenter', 'drop', 'change', 'dragleave', 'dragend'],\n};\n","const BROWSER_CHROME = 'chrome';\n\nexport default function isManualEventHandling() {\n  const { name, majorVersion } = Cypress.browser;\n\n  if (name === BROWSER_CHROME && majorVersion < 73) {\n    /**\n     * Chrome <73 triggers 'change' event automatically\n     * https://github.com/abramenal/cypress-file-upload/issues/34\n     */\n    return false;\n  }\n\n  return true;\n}\n","export const ERR_TYPES = {\n  INVALID_SUBJECT_TYPE: {\n    message: '\"subjectType\" is not valid',\n    tip: 'Please look into docs to find supported \"subjectType\" values',\n  },\n  INVALID_FORCE: {\n    message: '\"force\" is not valid',\n    tip: 'Please look into docs to find supported \"force\" values',\n  },\n  INVALID_ALLOW_EMPTY: {\n    message: '\"allowEmpty\" is not valid',\n    tip: 'Please look into docs to find supported \"allowEmpty\" values',\n  },\n  INVALID_FILE_ENCODING: {\n    message: '\"file encoding\" is not valid',\n    tip: 'Please look into docs to find supported \"encoding\" values',\n  },\n  INVALID_FILE_PATH: {\n    message: '\"filePath\" is not valid',\n    tip: 'Please look into docs to find supported \"filePath\" values',\n  },\n  INVALID_MIME_TYPE: {\n    message: '\"mimeType\" is not valid',\n    tip: 'Please look into docs to find supported \"mimeType\" values',\n  },\n  INVALID_FILE: {\n    message: 'given fixture file is empty',\n    tip: 'Please make sure you provide correct file or explicitly set \"allowEmpty\" to true',\n  },\n  MISSING_FILE_NAME_OR_PATH: {\n    message: 'missing \"filePath\" or \"fileName\"',\n    tip: 'Please make sure you are passing either \"filePath\" or \"fileName\"',\n  },\n};\n\nexport class InternalError extends Error {\n  constructor(errorType, ...params) {\n    super(...params);\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, InternalError);\n    }\n\n    this.name = '[cypress-file-upload error]';\n    this.message = `${errorType.message}.\\n${errorType.tip}`;\n  }\n}\n","export const ENCODING = Object.freeze({\n  ASCII: 'ascii',\n  BASE64: 'base64',\n  BINARY: 'binary',\n  HEX: 'hex',\n  LATIN1: 'latin1',\n  UTF8: 'utf8',\n  UTF_8: 'utf-8',\n  UCS2: 'ucs2',\n  UCS_2: 'ucs-2',\n  UTF16LE: 'utf16le',\n  UTF_16LE: 'utf-16le',\n});\n\nexport const FILE_EXTENSION = Object.freeze({\n  JSON: 'json',\n  JS: 'js',\n  COFFEE: 'coffee',\n  HTML: 'html',\n  TXT: 'txt',\n  CSV: 'csv',\n  PNG: 'png',\n  JPG: 'jpg',\n  JPEG: 'jpeg',\n  GIF: 'gif',\n  TIF: 'tif',\n  TIFF: 'tiff',\n  ZIP: 'zip',\n  PDF: 'pdf',\n  VCF: 'vcf',\n  SVG: 'svg',\n  XLS: 'xls',\n  XLSX: 'xlsx',\n});\n","import { ERR_TYPES, InternalError } from '../error';\nimport { ENCODING } from '../../lib/file/constants';\n\nconst ALLOWED_ENCODINGS = Object.values(ENCODING);\n\nexport default function validateFixtures(fixture) {\n  const { filePath, fileName, encoding, mimeType, fileContent } = fixture;\n\n  if (encoding && !ALLOWED_ENCODINGS.includes(encoding)) {\n    throw new InternalError(ERR_TYPES.INVALID_FILE_ENCODING);\n  }\n\n  if (typeof filePath !== 'string' && !fileContent) {\n    throw new InternalError(ERR_TYPES.INVALID_FILE_PATH);\n  }\n\n  if (typeof mimeType !== 'string') {\n    throw new InternalError(ERR_TYPES.INVALID_MIME_TYPE);\n  }\n\n  if (!filePath && !fileName) {\n    throw new InternalError(ERR_TYPES.MISSING_FILE_NAME_OR_PATH);\n  }\n}\n","import { ENCODING } from './constants';\n\nconst ENCODING_TO_BLOB_GETTER = {\n  [ENCODING.ASCII]: fileContent => Cypress.Promise.resolve(fileContent),\n  [ENCODING.BASE64]: (fileContent, mimeType) => Cypress.Blob.base64StringToBlob(fileContent, mimeType),\n  [ENCODING.BINARY]: (fileContent, mimeType) => Cypress.Blob.binaryStringToBlob(fileContent, mimeType),\n  [ENCODING.HEX]: fileContent => Cypress.Promise.resolve(fileContent),\n  [ENCODING.LATIN1]: fileContent => Cypress.Promise.resolve(fileContent),\n  [ENCODING.UTF8]: fileContent => Cypress.Promise.resolve(fileContent),\n  [ENCODING.UTF_8]: fileContent => Cypress.Promise.resolve(fileContent),\n  [ENCODING.UCS2]: fileContent => Cypress.Promise.resolve(fileContent),\n  [ENCODING.UCS_2]: fileContent => Cypress.Promise.resolve(fileContent),\n  [ENCODING.UTF16LE]: fileContent => Cypress.Promise.resolve(fileContent),\n  [ENCODING.UTF_16LE]: fileContent => Cypress.Promise.resolve(fileContent),\n};\n\nexport default function getFileBlobAsync({ fileName, fileContent, mimeType, encoding, window }) {\n  const getBlob = ENCODING_TO_BLOB_GETTER[encoding];\n\n  return getBlob(fileContent, mimeType).then(blob => {\n    // we must use the file constructor from the subject window so this check `file instanceof File`, can pass\n    const file = new window.File([blob], fileName, { type: mimeType });\n    return file;\n  });\n}\n","import { extname } from 'path';\n\nimport { ENCODING, FILE_EXTENSION } from './constants';\n\n/*\n * Copied from https://github.com/cypress-io/cypress/blob/develop/packages/server/lib/fixture.coffee#L104\n */\nconst EXTENSION_TO_ENCODING = {\n  [FILE_EXTENSION.JSON]: ENCODING.UTF8,\n  [FILE_EXTENSION.JS]: ENCODING.UTF8,\n  [FILE_EXTENSION.COFFEE]: ENCODING.UTF8,\n  [FILE_EXTENSION.HTML]: ENCODING.UTF8,\n  [FILE_EXTENSION.TXT]: ENCODING.UTF8,\n  [FILE_EXTENSION.CSV]: ENCODING.UTF8,\n  [FILE_EXTENSION.PNG]: ENCODING.BASE64,\n  [FILE_EXTENSION.JPG]: ENCODING.BASE64,\n  [FILE_EXTENSION.JPEG]: ENCODING.BASE64,\n  [FILE_EXTENSION.GIF]: ENCODING.BASE64,\n  [FILE_EXTENSION.TIF]: ENCODING.BASE64,\n  [FILE_EXTENSION.TIFF]: ENCODING.BASE64,\n  [FILE_EXTENSION.ZIP]: ENCODING.BASE64,\n\n  /*\n   * Other extensions that are not supported by cy.fixture by default:\n   */\n  [FILE_EXTENSION.PDF]: ENCODING.UTF8,\n  [FILE_EXTENSION.VCF]: ENCODING.UTF8,\n  [FILE_EXTENSION.SVG]: ENCODING.UTF8,\n  [FILE_EXTENSION.XLS]: ENCODING.BINARY,\n  [FILE_EXTENSION.XLSX]: ENCODING.BINARY,\n};\n\nconst DEFAULT_ENCODING = ENCODING.UTF8;\n\nexport default function getFileEncoding(filePath) {\n  const extension = extname(filePath).slice(1);\n  const encoding = EXTENSION_TO_ENCODING[extension];\n\n  return encoding || DEFAULT_ENCODING;\n}\n","import attachFile from './attachFile';\n\nconst initialize = () => {\n  Cypress.Commands.add('attachFile', { prevSubject: true }, attachFile);\n};\n\ninitialize();\n","import { DEFAULT_PROCESSING_OPTIONS } from './constants';\n\nimport { attachFileToElement, getFixtureInfo, getForceValue } from './helpers';\nimport { validateFixture, validateFile, validateOptions } from './validators';\n\nimport { getFileBlobAsync, getFileMimeType, getFileEncoding, getFileContent } from '../lib/file';\nimport { merge } from '../lib/object';\n\nexport default function attachFile(subject, fixture, processingOptions) {\n  const { subjectType, force, allowEmpty } = merge(processingOptions, DEFAULT_PROCESSING_OPTIONS);\n  validateOptions({ subjectType, force, allowEmpty });\n\n  const fixtureToAttach = getFixtureInfo(fixture);\n  validateFixture(fixtureToAttach);\n\n  const { filePath, encoding, mimeType, fileName } = fixtureToAttach;\n\n  const fileMimeType = mimeType || getFileMimeType(filePath);\n  const fileEncoding = encoding || getFileEncoding(filePath);\n  const forceValue = force || getForceValue(subject);\n\n  Cypress.cy.window({ log: false }).then(window => {\n    return getFileContent({ filePath, fileContent: fixtureToAttach.fileContent, fileEncoding }).then(fileContent => {\n      return getFileBlobAsync({ fileContent, fileName, mimeType: fileMimeType, encoding: fileEncoding, window }).then(\n        file => {\n          validateFile(file, allowEmpty);\n\n          attachFileToElement(subject, { file, subjectType, force: forceValue, window });\n\n          Cypress.log({\n            name: 'attachFile',\n            displayName: 'FILE',\n            message: file.name,\n          });\n        },\n      );\n    });\n  });\n\n  return Cypress.cy.wrap(subject, { log: false });\n}\n","export default function merge(target = {}, source = {}) {\n  return {\n    ...source,\n    ...target,\n  };\n}\n","import { SUBJECT_TYPE } from '../constants';\nimport { ERR_TYPES, InternalError } from '../error';\n\nexport default ({ subjectType, force, allowEmpty }) => {\n  if (Object.values(SUBJECT_TYPE).indexOf(subjectType) === -1) {\n    throw new InternalError(ERR_TYPES.INVALID_SUBJECT_TYPE);\n  }\n\n  if (typeof force !== 'boolean') {\n    throw new InternalError(ERR_TYPES.INVALID_FORCE);\n  }\n\n  if (typeof allowEmpty !== 'boolean') {\n    throw new InternalError(ERR_TYPES.INVALID_ALLOW_EMPTY);\n  }\n};\n","import path from 'path';\n\nexport default function getFixtureInfo(fixtureInput) {\n  if (typeof fixtureInput === 'string') {\n    return {\n      filePath: fixtureInput,\n      encoding: '',\n      mimeType: '',\n      fileName: path.basename(fixtureInput),\n    };\n  }\n\n  return {\n    filePath: fixtureInput.filePath,\n    encoding: fixtureInput.encoding || '',\n    mimeType: fixtureInput.mimeType || '',\n    fileName: fixtureInput.fileName || path.basename(fixtureInput.filePath),\n    fileContent: fixtureInput.fileContent,\n  };\n}\n","import { extname } from 'path';\nimport { getType } from 'mime';\n\nexport default function getFileMimeType(filePath) {\n  const extension = extname(filePath).slice(1);\n  const mimeType = getType(extension);\n\n  return mimeType;\n}\n","import { isManualEventHandling } from '../../lib/browser';\nimport { isElementVisible, isShadowElement } from '../../lib/dom';\n\nexport default function getForceValue(subject) {\n  return isManualEventHandling() || !isElementVisible(subject) || isShadowElement(subject);\n}\n","/**\n * @description determines if element is visible in DOM\n *\n * @param {Cypress.Subject} element\n * @returns {Boolean}\n */\nexport default function isElementVisible(element) {\n  if (!element) {\n    throw new Error('Element cannot be empty');\n  }\n\n  /* running isVisible command on detached element throws an error */\n  return Cypress.dom.isAttached(element) && Cypress.dom.isVisible(element);\n}\n","/**\n * @description determines if element is visible in DOM\n *\n * @param {Cypress.Subject} element\n * @returns {Boolean}\n */\nexport default function isShadowElement(element) {\n  if (!element) {\n    throw new Error('Element cannot be empty');\n  }\n\n  return Cypress.dom.isDetached(element);\n}\n","export default function getFileContent({ filePath, fileContent, fileEncoding }) {\n  // allows users to provide file content.\n  if (fileContent) {\n    return Cypress.Promise.resolve(fileContent);\n  }\n\n  return Cypress.cy.fixture(filePath, fileEncoding);\n}\n","import { ERR_TYPES, InternalError } from '../error';\n\nexport default (file, allowEmpty) => {\n  if (!allowEmpty) {\n    const { size } = file;\n\n    if (size === 0) {\n      throw new InternalError(ERR_TYPES.INVALID_FILE);\n    }\n  }\n};\n","import { SUBJECT_TYPE, EVENTS_BY_SUBJECT_TYPE } from '../constants';\n\nexport default function(subject, { file, subjectType, force, window }) {\n  const dataTransfer = new window.DataTransfer();\n  dataTransfer.items.add(file);\n\n  if (subjectType === SUBJECT_TYPE.INPUT) {\n    const inputElement = subject[0];\n\n    if (inputElement.files && inputElement.files.length > 0) {\n      /* Keep files that were attached before */\n      Array.prototype.forEach.call(inputElement.files, f => dataTransfer.items.add(f));\n    }\n\n    inputElement.files = dataTransfer.files;\n  }\n\n  if (force) {\n    const events = EVENTS_BY_SUBJECT_TYPE[subjectType];\n    const eventPayload = {\n      bubbles: true,\n      cancelable: true,\n      detail: dataTransfer,\n    };\n\n    events.forEach(e => {\n      const event = new CustomEvent(e, eventPayload);\n      Object.assign(event, { dataTransfer });\n\n      subject[0].dispatchEvent(event);\n    });\n  }\n}\n"],"names":["DEFAULT_PROCESSING_OPTIONS","Object","freeze","subjectType","force","allowEmpty","SUBJECT_TYPE","INPUT","DRAG_N_DROP","EVENTS_BY_SUBJECT_TYPE","const","ERR_TYPES","message","tip","InternalError","constructor","errorType","this","params","Error","captureStackTrace","name","ENCODING","ASCII","BASE64","BINARY","HEX","LATIN1","UTF8","UTF_8","UCS2","UCS_2","UTF16LE","UTF_16LE","FILE_EXTENSION","JSON","JS","COFFEE","HTML","TXT","CSV","PNG","JPG","JPEG","GIF","TIF","TIFF","ZIP","PDF","VCF","SVG","XLS","XLSX","ALLOWED_ENCODINGS","values","ENCODING_TO_BLOB_GETTER","fileContent","Cypress","Promise","resolve","mimeType","Blob","base64StringToBlob","binaryStringToBlob","EXTENSION_TO_ENCODING","DEFAULT_ENCODING","Commands","add","prevSubject","subject","fixture","processingOptions","target","source","ref","indexOf","validateOptions","fixtureInput","fixtureToAttach","filePath","encoding","fileName","path","basename","includes","validateFixture","fileMimeType","extension","extname","slice","getType","getFileMimeType","fileEncoding","getFileEncoding","forceValue","browser","element","dom","isAttached","isVisible","isElementVisible","isDetached","isShadowElement","getForceValue","cy","window","log","then","getFileContent","getBlob","blob","File","type","getFileBlobAsync","file","validateFile","dataTransfer","DataTransfer","items","inputElement","files","length","Array","prototype","forEach","call","f","eventPayload","bubbles","cancelable","detail","e","event","CustomEvent","assign","dispatchEvent","attachFileToElement","displayName","wrap"],"mappings":"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"}